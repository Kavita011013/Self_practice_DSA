//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int N = Integer.parseInt(read.readLine());
            
            String S[] = read.readLine().split(" ");
            int[] arr = new int[N];
            
            int D = Integer.parseInt(read.readLine());
            
            for(int i=0; i<N; i++)
                arr[i] = Integer.parseInt(S[i]);

            Solution ob = new Solution();
            System.out.println(ob.leastWeightCapacity(arr,N,D));
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    static boolean solve(int[] arr, int N, int D,int min, int max){
         
            int mid = (min+max)/2;
            int sum =0;
            int count=0;
             for ( int i = 0; i <arr.length;i++)
             {
                 // Case 1 : if the any element of the array is greater than the mid
                 if(arr[i]>mid)
                 return false;
                 
                 sum += arr[i];
                 if(sum> mid)
                 {
                     count++;
                     sum= arr[i];
                 }
             }
             count++;
             if(count<= D)
             return true;
             return false;
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
           /*  sum=0;
            int[] sum1= new int[D];
            int j =0;
            int k =0;
            for (int i =k ; i<N; i++)
            {
                sum +=arr[i];
                if (sum>mid)
                { sum1[j]= sum;
                sum =0;
                k =i+1;
                j++;
                  break;  
                }
                else  if( sum< mid)
                {
                    if((arr[i]+arr[i+1])> mid)
                    {
                        sum1[j]= arr[i];
                        sum =0;
                        k=i+1;
                        j++;
                        break;
                    }
                    
                }
                if(i == N-1)
                {
                    sum1[j]= sum;
                }
            }
           
            
        return sum1;*/
    }
    static int leastWeightCapacity(int[] arr, int N, int D) {
        // code here
        
        // first find low== i.e the largest elemt of the array
        // find the high i.e the sum of all the elements of the array
        int min =1;
        int max =0;
        for (int i = 0 ;i< N;i++)
        {
            if(arr[i]>min)
            min = arr[i];
            
            max += arr[i];
            
        }
        int flag =0;
        int ans=0;
        while (min<=max)
        {
            int mid = (min+max)/2;
            if(solve(arr,N,D,min,max))
            {
                ans = mid;
                max = mid -1;
            }
            else 
            {
                min = mid +1;
            }
            //int count =k.length ;
            /*if( count < D){
               solve(arr,N,D,min,mid); 
                //ans = mid;
                //max = mid -1;
            }
           
            else if( count == D)
            {
             ans = mid;   
            }
            
            else if( count > D)
            {
                ans = mid+1;
            }*/
            
        }
       return ans; 
    }
};