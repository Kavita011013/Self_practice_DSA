class  LinkedList{
    static Node head;
    
    // Basic creation of node structure
    static class Node
    {
        int data;
        Node next;
        
        Node(int d)
        {
            data = d;
            next = null;
        }
    }
    
    public static void insertLAST(LinkedList list, int data)
    {
        // creating a new structure for given data
        Node new_node= new Node(data);
        // Checking is LL is empty or not
        if(list.head == null)
        {
            list.head = new_node;
        }
        else
        {
            //Traverse to the last node
            Node temp = list.head;
            while(temp.next != null)
             temp= temp.next;
            temp.next = new_node;
           // Node temp = list.head;
      //while(temp.next != null)
        //temp = temp.next;
      //temp.next = new_node;
        }
       // return list;
        
    }
    
    public static void insertATPOS( LinkedList list, int data, int position)
    {
        Node lastest_node = new Node(data);
        
        if(position <1)
        {
            System.out.println(" position should be greater than 1");
        }
        else if( position ==1)
        {
            lastest_node.next= head;
            head = lastest_node;
        }
        else{
            Node temp = list.head;
            for(int i =1 ; i< position -1; i++)
            {
                temp = temp.next;
            }
            
            if(temp != null)
            {
                lastest_node.next = temp.next;
                temp.next = lastest_node;
            }
            
        }
        //return list;
    }
    
    public static void PrintList( LinkedList list)
    {
        Node curr_node = list.head;
        System.out.println(" Linked list : ");
        while(curr_node != null)
        {
        
            System.out.println(curr_node.data+" ");
            curr_node = curr_node.next;
        }
    }
   
};
class main{
    public static void main(String args[])
    {
        LinkedList  list = new LinkedList();
         list.insertLAST(list, 1);
         list.insertLAST(list, 2);
         list.insertLAST(list, 3);
         list.insertLAST(list, 4);
         list.insertLAST(list, 5);
         list.insertLAST(list, 6);
        list.insertLAST(list, 7);
        list.insertLAST(list, 8);
        list.insertLAST(list, 9);
        list.insertLAST(list, 10);
       list.PrintList(list);
        
        list.insertATPOS(list, 13,1);
        System.out.println(" new changed Linked list #1: ");
        list.PrintList(list);
        
         list.insertATPOS(list, 17,7);
        System.out.println(" new changed Linked list #2: ");
        list.PrintList(list);
        
    }
}